name: Build Release

on: 
  workflow_dispatch:

jobs:
  # 验证仓库配置（确保 PACKAGE_NAME 已设置）
  config:
    runs-on: ubuntu-latest
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
      packages: ${{ steps.parse_packages.outputs.packages }}  # 输出分割后的包名列表
    steps:
      - name: Validate Package Config
        id: config_package
        run: |
          if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
            echo "configPackage=true" >> $GITHUB_OUTPUT;
          else
            echo "configPackage=false" >> $GITHUB_OUTPUT;
          fi
      - name: Parse Packages
        id: parse_packages
        if: vars.PACKAGE_NAME != ''
        run: |
          # 将逗号分隔的包名转换为 JSON 数组（供矩阵使用）
          packages=$(echo '["'$(echo "${{ vars.PACKAGE_NAME }}" | sed 's/,/","/g')'"]')
          echo "packages=$packages" >> $GITHUB_OUTPUT

  # 为每个包单独构建并发布
  build:
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.config.outputs.config_package == 'true'
    strategy:
      # 矩阵遍历所有包名（从 config 步骤输出的 JSON 数组获取）
      matrix:
        package: ${{ fromJSON(needs.config.outputs.packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      # 获取当前包的版本（从 package.json 读取）
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with: 
          file_path: "Packages/${{ matrix.package }}/package.json"  # 路径含当前包名
          prop_path: "version"
    
      # 配置当前包的环境变量（确保文件名唯一）
      - name: Set Environment Variables
        run: |
          echo "packagePath=Packages/${{ matrix.package }}" >> $GITHUB_ENV
          echo "zipFile=${{ matrix.package }}-${{ steps.version.outputs.value }}.zip" >> $GITHUB_ENV
          echo "unityPackage=${{ matrix.package }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV
          echo "metaList=metaList_${{ matrix.package }}" >> $GITHUB_ENV  # 每个包单独的 meta 列表文件

      # 压缩当前包
      - name: Create Package Zip
        working-directory: "${{ env.packagePath }}"
        run: zip -r "${{ github.workspace }}/${{ env.zipFile }}" .
      
      # 收集当前包的 .meta 文件（单独存储，避免冲突）
      - name: Track Package Meta Files
        run: find "${{ env.packagePath }}/" -name \*.meta >> "${{ env.metaList }}"
      
      # 为当前包创建 UnityPackage
      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@v1.2.3
        with:
          package-path: ${{ env.unityPackage }}
          include-files: ${{ env.metaList }}  # 使用当前包的 meta 列表
      
      # 检查标签是否存在
      - name: Check Tag Existence
        id: check_tag
        if: matrix.package == fromJSON(needs.config.outputs.packages)[0]
        run: |
          if git rev-parse ${{ env.version }} >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ env.version }} already exists."
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ env.version }} does not exist."
          fi
      
      # 仅在标签不存在时创建标签
      - name: Create Tag (Only if Tag Doesn't Exist)
        if: matrix.package == fromJSON(needs.config.outputs.packages)[0] && steps.check_tag.outputs.tag_exists == 'false'
        id: tag_version
        uses: rickstaa/action-create-tag@88dbf7ff6fe2405f8e8f6c6fdfd78829bc631f83
        with:
          tag: "${{ env.version }}"
      
      # 发布当前包的产物到 Release（所有包的产物会合并到同一个 Release）
      - name: Make Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          files: |
            ${{ env.zipFile }}
            ${{ env.unityPackage }}
            ${{ env.packagePath }}/package.json
          tag_name: ${{ env.version }}  # 所有包共用同一个版本标签（假设版本一致）